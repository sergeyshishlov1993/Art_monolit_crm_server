const { Router } = require("express");
const router = Router();

const { models } = require("../models/index");
const { Defective, Warehouse } = models;
const { Op } = require("sequelize");

router.get("/", async (req, res) => {
  const { search } = req.query;

  try {
    const where = {};

    if (search) {
      where[Op.or] = [{ name: { [Op.like]: `%${search}%` } }];
    }

    const defective = await Defective.findAll({ where });
    res.status(200).json({
      message: "–£—Å–ø–µ—à–Ω–æ (–ë—Ä–∞–∫)",
      defective,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö" });
  }
});

// router.put("/update-quantity/:id", async (req, res) => {
//   const transaction = await Defective.sequelize.transaction();

//   try {
//     const { id } = req.params;
//     const { quantity } = req.body;

//     const defectiveItem = await Defective.findByPk(id);

//     if (!defectiveItem) {
//       await transaction.rollback();
//       return res.status(404).json({ message: "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
//     }

//     defectiveItem.quantity = quantity;
//     await defectiveItem.save({ transaction });

//     await transaction.commit();
//     res.status(200).json({
//       message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
//       defectiveItem,
//     });
//   } catch (error) {
//     await transaction.rollback();
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", error);
//     res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞" });
//   }
// });

router.put("/update-quantity/:id", async (req, res) => {
  const transaction = await Defective.sequelize.transaction();

  try {
    const { id } = req.params;
    const { quantity } = req.body;

    const defectiveItem = await Defective.findByPk(id, { transaction });

    if (!defectiveItem) {
      await transaction.rollback();
      return res.status(404).json({ message: "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    const warehouseItem = await Warehouse.findByPk(defectiveItem.warehouseId, {
      transaction,
    });

    if (!warehouseItem) {
      await transaction.rollback();
      return res.status(404).json({ message: "–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const previousDefective = defectiveItem.quantity;
    let warehouseStock = warehouseItem.quantity;

    let newDefectiveQuantity = quantity;
    let newWarehouseQuantity = warehouseStock;

    if (quantity > previousDefective) {
      const additionalDefective = quantity - previousDefective;

      if (warehouseStock >= additionalDefective) {
        newWarehouseQuantity -= additionalDefective;
      } else {
        newWarehouseQuantity = 0;
      }
    } else if (quantity < previousDefective) {
      const returnToStock = previousDefective - quantity;
      newWarehouseQuantity += returnToStock;
    }

    defectiveItem.quantity = newDefectiveQuantity;
    warehouseItem.quantity = newWarehouseQuantity;
    warehouseItem.defective = newDefectiveQuantity;

    await defectiveItem.save({ transaction });
    await warehouseItem.save({ transaction });

    await transaction.commit();

    res.status(200).json({
      message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
      defectiveItem,
      warehouseItem,
    });
  } catch (error) {
    await transaction.rollback();
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞" });
  }
});

// router.put("/update-quantity/:id", async (req, res) => {
//   const transaction = await Defective.sequelize.transaction();

//   try {
//     const { id } = req.params;
//     const { quantity } = req.body;

//     console.log("üîπ –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å Defective ID:", id);
//     const defectiveItem = await Defective.findByPk(id, { transaction });

//     if (!defectiveItem) {
//       await transaction.rollback();
//       return res.status(404).json({ message: "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
//     }

//     const warehouseItem = await Warehouse.findByPk(defectiveItem.warehouseId, {
//       transaction,
//     });

//     if (!warehouseItem) {
//       await transaction.rollback();
//       return res.status(404).json({ message: "–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
//     }

//     const previousQuantity = defectiveItem.quantity;
//     const defectiveDifference = quantity - previousQuantity;

//     if (quantity > 0) {
//       defectiveItem.quantity = quantity;
//       await defectiveItem.save({ transaction });
//     } else {
//       await defectiveItem.destroy({ transaction });
//       console.log("‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å Defective, —Ç–∞–∫ –∫–∞–∫ –±—Ä–∞–∫–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç");
//     }

//     warehouseItem.defective = quantity > 0 ? quantity : 0;
//     await warehouseItem.save({ transaction });

//     await transaction.commit();

//     res.status(200).json({
//       message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
//       defectiveItem,
//     });
//   } catch (error) {
//     await transaction.rollback();
//     res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞" });
//   }
// });

router.delete("/delete/:id", async (req, res) => {
  const transaction = await Defective.sequelize.transaction();

  try {
    const { id } = req.params;

    const defectiveItem = await Defective.findByPk(id);

    if (!defectiveItem) {
      await transaction.rollback();
      return res.status(404).json({ message: "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
    await defectiveItem.destroy({ transaction });

    await transaction.commit();
    res.status(200).json({ message: "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞" });
  } catch (error) {
    await transaction.rollback();
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏" });
  }
});

module.exports = router;

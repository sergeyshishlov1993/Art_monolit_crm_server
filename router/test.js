const { Router } = require("express");
const TelegramBot = require("node-telegram-bot-api");
const router = Router();
const { models } = require("../models/index");

const {
  Orders,
  OrderDeads,
  OrderMaterials,
  OrderWorks,
  OrderServices,
  Warehouse,
  Materials,
} = models;

const { Op } = require("sequelize");
const botStatusToken = "8162606893:AAEBI9zyxJ65SDAJAcYzPRDyXXbyuaWYkac";
const botOrdersTokken = "7983082460:AAGjnK4UrVeN8eNDKm0bQoFu0itVRxQ1-sE";
const botWarehouseToken = "7740212030:AAGOnzCMvqJrJkyrg3YpuQC7SrG7icJfuTE";
// const bot = new TelegramBot(botStatusToken, { polling: true });
// const botOrders = new TelegramBot(botOrdersTokken, { polling: true });
// const botWarehouse = new TelegramBot(botWarehouseToken, { polling: true });

//TELEGRAM BOTS START
const statusChatIds = new Set();
const orderChatIds = new Set();
const warehouseChatIds = new Set();

// bot.onText(/\/start/, (msg) => {
//   const chatId = msg.chat.id;
//   statusChatIds.add(chatId);
//   bot.sendMessage(
//     chatId,
//     "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –∑–∞–∫–∞–∑–æ–≤."
//   );
// });

// botOrders.onText(/\/start/, (msg) => {
//   const chatId = msg.chat.id;
//   orderChatIds.add(chatId);
//   botOrders.sendMessage(
//     chatId,
//     "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö."
//   );
// });

// botWarehouse.onText(/\/start/, (msg) => {
//   const chatId = msg.chat.id;

//   warehouseChatIds.add(chatId);

//   const welcomeMessage =
//     "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–µ.";
//   const replyMarkup = {
//     reply_markup: {
//       inline_keyboard: [
//         [{ text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏", callback_data: "check_stock" }],
//       ],
//     },
//   };

//   botWarehouse.sendMessage(chatId, welcomeMessage, replyMarkup);
// });

// botWarehouse.on("callback_query", async (query) => {
//   const chatId = query.message.chat.id;
//   const action = query.data;

//   if (action === "check_stock") {
//     try {
//       const lowStockItems = await Warehouse.findAll({
//         where: {
//           quantity: {
//             [Op.lt]: 5,
//           },
//         },
//       });

//       if (lowStockItems.length === 0) {
//         return botWarehouse.sendMessage(chatId, "‚úÖ –í—Å–µ –∑–∞–ø–∞—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ!");
//       }

//       const message = lowStockItems
//         .map(
//           (item) =>
//             `üõ† <b>${item.name}(${item.length}X${item.width}X${item.thickness})</b>\n` +
//             `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n\n`
//         )
//         .join("");

//       botWarehouse.sendMessage(
//         chatId,
//         `‚ö†Ô∏è <b>–¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º:</b>\n\n${message}`,
//         { parse_mode: "HTML" }
//       );
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤:", error);
//       botWarehouse.sendMessage(
//         chatId,
//         "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ."
//       );
//     }
//   }

//   botWarehouse.answerCallbackQuery(query.id);
// });

// async function sendLowStockNotification(
//   materialName,
//   requiredQuantity,
//   availableQuantity,
//   missingQuantity
// ) {
//   const message = `
//     ‚ö†Ô∏è <b>–ù–∞ —Å–∫–ª–∞–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—å—Å—è:</b> ${materialName}\n
//     üì¶ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è:</b> ${requiredQuantity}\n
//     üì¶ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> ${availableQuantity}\n
//     ‚ùóÔ∏è <b>–ù—É–∂–Ω–æ –¥–æ–∑–∞–∫–∞–∑–∞—Ç—å:</b> ${missingQuantity}
//   `;

//   for (const chatId of warehouseChatIds) {
//     try {
//       await botWarehouse.sendMessage(chatId, message, { parse_mode: "HTML" });
//     } catch (error) {
//       console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error);
//     }
//   }
// }
function selectStatus(key) {
  const statusOptions = {
    new: "–ù–æ–≤—ã–π",
    layout: "–ú–∞–∫–µ—Ç",
    "layout-accepted": "–ü—Ä–∏–Ω—è—Ç –ú–∞–∫–µ—Ç",
    "engraving(front)": "–ì—Ä–∞–≤–∏—Ä–æ–≤–∫–∞(–§—Ä–æ–Ω—Ç)",
    "engraving(reverse)": "–ì—Ä–∞–≤–∏—Ä–æ–≤–∫–∞(–†–µ–≤–µ—Ä—Å)",
    "engraving(plate)": "–ì—Ä–∞–≤–∏—Ä–æ–≤–∫–∞(–ü–ª–∏—Ç–∞)",
    "engraving(stand)": "–ì—Ä–∞–≤–∏—Ä–æ–≤–∫–∞(–¢—É–º–±–∞)",
    milling: "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞",
    concreting: "–ë–µ—Ç–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "laying-tiles": "–£–∫–ª–∞–¥–∫–∞ –ø–ª–∏—Ç–∫–∏",
    installation: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞",
    completed: "–ó–∞–≤–µ—Ä—à–µ–Ω",
  };

  return statusOptions[key];
}
async function createMissingMaterial(material, deficit, transaction) {
  const existingMaterial = await Materials.findOne({
    where: { name: material.name },
    transaction,
  });

  if (!existingMaterial) {
    await Materials.create(
      {
        id: material.id,
        name: material.name,
        length: material.length || null,
        width: material.width || null,
        thickness: material.thickness || null,
        price: material.price || 0,
        priceM2: material.priceM2,
        weight: material.weight,
        quantity: deficit,
        isCreateMenedger: false,
      },
      { transaction }
    );
  } else {
    existingMaterial.quantity += deficit;

    await existingMaterial.save({ transaction });
  }
}
async function createCustomMaterials(material, transaction) {
  await Materials.create(
    {
      id: material.id,
      name: material.name,
      length: material.length || null,
      width: material.width || null,
      thickness: material.thickness || null,
      price: material.price || 0,
      priceM2: material.priceM2,
      weight: material.weight,
      quantity: material.quantity,
      isCreateMenedger: false,
    },
    { transaction }
  );
}
async function deleteCustomMaterials(orderMaterials, transaction) {
  for (const material of orderMaterials) {
    if (material.isCreatedMenedger) {
      await Materials.destroy({
        where: { name: material.name },
        transaction,
      });
    }
  }
}
async function deleteRelatedData(parentId, transaction) {
  await OrderDeads.destroy({ where: { parentId }, transaction });
  await OrderMaterials.destroy({ where: { parentId }, transaction });
  await OrderWorks.destroy({ where: { parentId }, transaction });
  await OrderServices.destroy({ where: { parentId }, transaction });
}
async function handleOrderDeads(orderDeads, parentId, transaction) {
  if (orderDeads && orderDeads.length > 0) {
    for (const dead of orderDeads) {
      await OrderDeads.create({ ...dead, parentId }, { transaction });
    }
  }
}
// async function handleOrderMaterials(
//   orderMaterials,
//   parentId,
//   transaction,
//   isUpdate = false
// ) {
//   if (!orderMaterials || orderMaterials.length === 0) return;

//   for (const material of orderMaterials) {
//     const { quantity = 1, warehouseId, ...rest } = material;

//     const parsedQuantity = parseFloat(quantity) || 0;
//     let previousQuantity = 0;

//     if (isUpdate) {
//       const oldOrderMaterials = await OrderMaterials.findAll({});

//       if (oldOrderMaterials.length != orderMaterials.length) {
//         const newMaterialIds = orderMaterials.map((item) => String(item.id));

//         const deletedMaterials = oldOrderMaterials.filter(
//           (oldMaterial) => !newMaterialIds.includes(String(oldMaterial.id))
//         );

//         await returnMaterialsToWarehouse(deletedMaterials);

//         await updateMaterialsDeficit(deletedMaterials);
//       }

//       if (oldOrderMaterials.length > 0) {
//         await returnMaterialsToWarehouse(oldOrderMaterials);

//         await updateMaterialsDeficit(orderMaterials);
//       } else {
//         console.log(
//           "NO OLD MATERIALS FOUND. SKIPPING RETURN AND DEFICIT UPDATE"
//         );
//       }

//       console.log("orderMaterials!!!!!!!!!", orderMaterials);

//       await OrderMaterials.upsert(
//         {
//           ...orderMaterials,
//           parentId: material.parentId,
//         },
//         { transaction }
//       );
//     } else if (material.isCreatedMenedger) {
//       await createCustomMaterials(material, transaction);

//       console.log("isCreatedMenedger");

//       await OrderMaterials.upsert(
//         {
//           ...material,
//           quantity: parsedQuantity,
//           deficit: 0,
//           parentId,
//           warehouseId: null,
//         },
//         { transaction }
//       );
//     } else {
//       const quantityDifference = parsedQuantity - previousQuantity;

//       let deficit = 0;

//       if (warehouseId) {
//         const warehouseItem = await Warehouse.findByPk(warehouseId, {
//           transaction,
//         });

//         if (!warehouseItem) {
//           throw new Error(`–°–∫–ª–∞–¥—Å–∫–æ–π —Ç–æ–≤–∞—Ä —Å ID ${warehouseId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
//         }

//         const availableQuantity = parseFloat(warehouseItem.quantity) || 0;

//         if (quantityDifference > 0) {
//           if (availableQuantity >= quantityDifference) {
//             warehouseItem.quantity -= quantityDifference;
//           } else {
//             deficit = quantityDifference - availableQuantity;
//             warehouseItem.quantity = 0;

//             await createMissingMaterial(warehouseItem, deficit, transaction);
//           }

//           await warehouseItem.save({ transaction });
//         } else if (quantityDifference < 0) {
//           warehouseItem.quantity += Math.abs(quantityDifference);
//           deficit = 0;
//           await warehouseItem.save({ transaction });
//         }
//       }

//       await OrderMaterials.upsert(
//         {
//           ...rest,
//           quantity: parsedQuantity,
//           deficit,
//           parentId,
//           warehouseId,
//         },
//         { transaction }
//       );

//       console.log("FINAL");
//     }
//   }
// }

async function handleOrderMaterials(
  orderMaterials,
  parentId,
  transaction,
  isUpdate = false
) {
  if (!orderMaterials || orderMaterials.length === 0) return;

  for (const material of orderMaterials) {
    const { quantity = 1, warehouseId, ...rest } = material;

    const parsedQuantity = parseFloat(quantity) || 0;
    let previousQuantity = 0;

    if (isUpdate) {
      const oldOrderMaterials = await OrderMaterials.findAll({
        where: { parentId },
      });

      if (oldOrderMaterials.length !== orderMaterials.length) {
        const newMaterialIds = orderMaterials.map((item) => String(item.id));

        const deletedMaterials = oldOrderMaterials.filter(
          (oldMaterial) => !newMaterialIds.includes(String(oldMaterial.id))
        );

        await returnMaterialsToWarehouse(deletedMaterials);
        await updateMaterialsDeficit(deletedMaterials);
      }

      if (oldOrderMaterials.length > 0) {
        await returnMaterialsToWarehouse(oldOrderMaterials);
        await updateMaterialsDeficit(orderMaterials);
      } else {
        console.log(
          "NO OLD MATERIALS FOUND. SKIPPING RETURN AND DEFICIT UPDATE"
        );
      }

      console.log("orderMaterials!!!!!!!!!", orderMaterials);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–Ω—è material –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º –æ–ø–µ—Ä–∞—Ü—ñ–π
    if (!material.name || parsedQuantity <= 0) {
      console.log(
        `SKIPPING: Invalid material data - ${JSON.stringify(material)}`
      );
      continue;
    }

    if (material.isCreatedMenedger) {
      await createCustomMaterials(material, transaction);

      console.log("isCreatedMenedger");

      await OrderMaterials.upsert(
        {
          ...material,
          quantity: parsedQuantity,
          deficit: 0,
          parentId,
          warehouseId: null,
        },
        { transaction }
      );
    } else {
      const quantityDifference = parsedQuantity - previousQuantity;

      let deficit = 0;

      if (warehouseId) {
        const warehouseItem = await Warehouse.findByPk(warehouseId, {
          transaction,
        });

        if (!warehouseItem) {
          throw new Error(`–°–∫–ª–∞–¥—Å–∫–æ–π —Ç–æ–≤–∞—Ä —Å ID ${warehouseId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        const availableQuantity = parseFloat(warehouseItem.quantity) || 0;

        if (quantityDifference > 0) {
          if (availableQuantity >= quantityDifference) {
            warehouseItem.quantity -= quantityDifference;
          } else {
            deficit = quantityDifference - availableQuantity;
            warehouseItem.quantity = 0;

            await createMissingMaterial(warehouseItem, deficit, transaction);
          }

          await warehouseItem.save({ transaction });
        } else if (quantityDifference < 0) {
          warehouseItem.quantity += Math.abs(quantityDifference);
          deficit = 0;
          await warehouseItem.save({ transaction });
        }
      }

      await OrderMaterials.upsert(
        {
          ...rest,
          quantity: parsedQuantity,
          deficit,
          parentId,
          warehouseId,
        },
        { transaction }
      );
    }
  }
}

async function handleOrderServices(orderServices, parentId, transaction) {
  if (orderServices && orderServices.length > 0) {
    for (const service of orderServices) {
      await OrderServices.create({ ...service, parentId }, { transaction });
    }
  }
}
async function handleOrderWorks(orderWorks, parentId, transaction) {
  if (orderWorks && orderWorks.length > 0) {
    for (const work of orderWorks) {
      await OrderWorks.create({ ...work, parentId }, { transaction });
    }
  }
}
async function sendOrderUpdateMessage(message, type) {
  const targetChatIds = type === "status" ? statusChatIds : orderChatIds;

  for (const chatId of targetChatIds) {
    try {
      if (type === "status") {
        await bot.sendMessage(chatId, message, { parse_mode: "HTML" });
      } else {
        await botOrders.sendMessage(chatId, message, { parse_mode: "HTML" });
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error);
    }
  }
}
async function returnMaterialsToWarehouse(orderMaterials, transaction) {
  for (const material of orderMaterials) {
    if (material.isCreatedMenedger) {
      continue;
    }

    const warehouseItem = await Warehouse.findByPk(material.warehouseId, {
      transaction,
    });

    if (warehouseItem) {
      const returnableQuantity =
        parseFloat(material.quantity) - parseFloat(material.deficit || 0);

      warehouseItem.quantity += returnableQuantity;
      await warehouseItem.save({ transaction });
    } else {
      console.warn(
        `–°–∫–ª–∞–¥—Å–∫–æ–π —Ç–æ–≤–∞—Ä —Å ID ${material.warehouseId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ${material.name}`
      );
    }
  }
}
async function updateMaterialsDeficit(orderMaterials, transaction) {
  for (const material of orderMaterials) {
    if (material.isCreatedMenedger) {
      continue;
    }
    if (material.deficit && material.deficit > 0) {
      const existingMaterial = await Materials.findByPk(material.warehouseId, {
        transaction,
      });

      if (existingMaterial) {
        existingMaterial.quantity -= material.deficit; // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if (existingMaterial.quantity < 0) existingMaterial.quantity = 0; // –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

        await existingMaterial.save({ transaction });

        if (existingMaterial.quantity === 0) {
          await Materials.destroy({
            where: {
              id: material.warehouseId,
            },
            transaction,
          });
        }
      } else {
        console.warn(
          `–ú–∞—Ç–µ—Ä–∏–∞–ª —Å ID ${material.warehouseId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ Materials`
        );
      }
    }
  }
}

router.get("/", async (req, res) => {
  const { status, startDate, endDate, search } = req.query;

  try {
    const where = {};

    if (status) {
      where.status = status;
    }

    if (startDate || endDate) {
      where.createdAt = {};
      if (startDate) {
        where.createdAt[Op.gte] = new Date(startDate);
      }
      if (endDate) {
        where.createdAt[Op.lte] = new Date(endDate);
      }
    }

    // –ü–æ—à—É–∫
    if (search) {
      where[Op.or] = [{ phone: { [Op.like]: `%${search}%` } }];
    }

    const orders = await Orders.findAll({
      where,
      include: [
        {
          model: models.OrderMaterials,
        },
        {
          model: models.OrderWorks,
        },
        {
          model: models.OrderServices,
        },
        {
          model: models.OrderDeads,
        },
      ],
    });

    res.status(200).json({
      message: "–£—Å–ø–µ—à–Ω–æ (–ó–∞–∫–∞–∑—ã)",
      orders,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö" });
  }
});
router.get("/:id", async (req, res) => {
  const { id: orderId } = req.params;

  try {
    const order = await Orders.findOne({
      where: { id: orderId },
      include: [
        {
          model: models.OrderMaterials,
        },
        {
          model: models.OrderWorks,
        },
        {
          model: models.OrderServices,
        },
        {
          model: models.OrderDeads,
        },
      ],
    });

    if (!order) {
      return res
        .status(404)
        .json({ message: `–ó–∞–∫–∞–∑ —Å ID ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
    }

    res.status(200).json({
      message: `–£—Å–ø–µ—à–Ω–æ (–ó–∞–∫–∞–∑, ${orderId})`,
      order,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞" });
  }
});
router.post("/create", async (req, res) => {
  const { orderData, orderDeads, orderMaterials, orderWorks, orderServices } =
    req.body;

  const transaction = await Orders.sequelize.transaction();

  try {
    const order = await Orders.create(orderData, { transaction });

    await handleOrderDeads(orderDeads, order.id, transaction);
    await handleOrderMaterials(orderMaterials, order.id, transaction, false);
    await handleOrderWorks(orderWorks, order.id, transaction);
    await handleOrderServices(orderServices, order.id, transaction);

    const message = `
    üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n
    üìù <b>–ù–∞–∑–≤–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${order.name}\n
    üë§ <b>–ó–∞–º–æ–≤–Ω–∏–∫:</b> ${order.first_name} ${order.second_name}\n
    üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${order.phone}\n
    üïí <b>–î–∞—Ç–∞ –∑–º—ñ–Ω–∏:</b> ${new Date().toLocaleString()}\n
    üîÑ <b>–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:</b> ${selectStatus(order.status)}\n
    üí≥ <b>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞:</b> ${order.prepayment}‚Ç¥\n
    üíµ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> ${order.totalPrice}‚Ç¥\n
    üíª <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${order.source}\n

        `;

    await sendOrderUpdateMessage(message, "orders");

    await transaction.commit();

    res.status(200).json({
      message: "–£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
      order,
    });
  } catch (error) {
    await transaction.rollback();
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
  }
});
router.put("/update/:id", async (req, res) => {
  const { id } = req.params;
  const { orderData, orderDeads, orderMaterials, orderWorks, orderServices } =
    req.body;

  const transaction = await Orders.sequelize.transaction();

  try {
    const order = await Orders.findByPk(id);
    if (!order) {
      return res.status(404).json({ message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    await order.update(orderData, { transaction });
    await deleteRelatedData(id, transaction);
    await handleOrderDeads(orderDeads, id, transaction);
    await handleOrderMaterials(orderMaterials, id, transaction, true);
    await handleOrderWorks(orderWorks, id, transaction);
    await handleOrderServices(orderServices, id, transaction);

    await transaction.commit();

    res.status(200).json({
      message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ",
      order,
    });
  } catch (error) {
    await transaction.rollback();
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
  }
});
router.put("/change-status-order", async (req, res) => {
  const { orderId, newStatus } = req.body;

  if (!orderId || !newStatus) {
    return res
      .status(400)
      .json({ message: "orderId —Ç–∞ newStatus —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏" });
  }

  const transaction = await Orders.sequelize.transaction();

  try {
    await Orders.update(
      { status: newStatus },
      { where: { id: orderId }, transaction }
    );

    const order = await Orders.findByPk(orderId);

    if (!order) {
      throw new Error("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }

    const message = `
üì¶ <b>–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ</b>\n
üìù <b>–ù–∞–∑–≤–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${order.name}\n
üë§ <b>–ó–∞–º–æ–≤–Ω–∏–∫:</b> ${order.first_name} ${order.second_name}\n
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${order.phone}\n
üïí <b>–î–∞—Ç–∞ –∑–º—ñ–Ω–∏:</b> ${new Date().toLocaleString()}\n
üîÑ <b>–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:</b> ${selectStatus(newStatus)}
    `;

    await sendOrderUpdateMessage(message, "status");

    await transaction.commit();

    res.status(200).json({ message: "–£—Å–ø—ñ—à–Ω–æ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ" });
  } catch (error) {
    await transaction.rollback();
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
  }
});
router.delete("/remove-order/:orderId", async (req, res) => {
  const { orderId } = req.params;

  const transaction = await Orders.sequelize.transaction();

  try {
    const order = await Orders.findByPk(orderId, { transaction });

    const isCompleted = order.status === "completed";

    const orderMaterials = await OrderMaterials.findAll({
      where: { parentId: orderId },
      transaction,
    });

    if (orderMaterials.length === 0) {
      console.log("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      return res
        .status(404)
        .json({ message: "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
    }

    if (!isCompleted) {
      await returnMaterialsToWarehouse(orderMaterials, transaction);
      await updateMaterialsDeficit(orderMaterials, transaction);
    }

    await deleteCustomMaterials(orderMaterials, transaction);

    await Orders.destroy({
      where: { id: orderId },
      transaction,
    });

    await transaction.commit();

    res.status(200).json({
      message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω, —Ä–µ—Å—É—Ä—Å—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥",
    });
  } catch (error) {
    await transaction.rollback();
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —Å ID: ${orderId}. –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.`
    );
    console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", error);

    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" });
  }
});

module.exports = router;

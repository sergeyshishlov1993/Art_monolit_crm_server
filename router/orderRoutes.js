// routes/orderRoutes.js
const { Router } = require("express");
const upload = require("multer")({
  storage: require("multer").memoryStorage(),
});
const {
  createOrder,
  getOrders,
  getOrderById,
  // updateOrder,
  deleteOrder,
  getOrdersWithTotal,
} = require("../services/orderService");
const { updateOrder } = require("../services/updateOrder");
const { updateOrderStatus } = require("../services/statusService");

const router = Router();

const {
  botStatus,
  botOrders,
  botWarehouse,
  statusChatIds,
  orderChatIds,
  warehouseChatIds,
} = require("../middleware/bots");

botStatus.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  statusChatIds.add(chatId);
  botStatus.sendMessage(
    chatId,
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –∑–∞–∫–∞–∑–æ–≤."
  );
});

botOrders.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  orderChatIds.add(chatId);
  botOrders.sendMessage(
    chatId,
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö."
  );
});

botWarehouse.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  if (!warehouseChatIds.has(chatId)) {
    warehouseChatIds.add(chatId);

    const welcomeMessage =
      "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–µ.";

    botWarehouse.sendMessage(chatId, welcomeMessage, {
      reply_markup: {
        remove_keyboard: true,
        inline_keyboard: [],
      },
    });
  } else {
    botWarehouse.sendMessage(
      chatId,
      "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
      {
        reply_markup: {
          remove_keyboard: true,
        },
      }
    );
  }
});

router.get("/", async (req, res) => {
  try {
    const orders = await getOrders(req.query);
    res.status(200).json(orders);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤" });
  }
});

router.get("/calc-orders", async (req, res) => {
  try {
    const result = await getOrdersWithTotal(req.query);
    res.json(result);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.get("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const order = await getOrderById(id);
    if (!order) {
      return res.status(404).json({ message: `–ó–∞–∫–∞–∑ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
    }
    res.status(200).json({ message: "–£—Å–ø–µ—à–Ω–æ (–ó–∞–∫–∞–∑)", order });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞" });
  }
});

router.post("/create", upload.array("photos"), async (req, res) => {
  try {
    const {
      orderData,
      orderDeads,
      orderMaterials,
      orderWorks,
      orderServices,
      rowsPhotos,
    } = req.body;
    const result = await createOrder(
      orderData,
      orderDeads,
      orderMaterials,
      orderWorks,
      orderServices,
      rowsPhotos
    );
    res
      .status(200)
      .json({ message: "–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑", order: result.order });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" });
  }
});

router.put("/update/:id", upload.array("photos"), async (req, res) => {
  try {
    const { id } = req.params;
    const {
      orderData,
      orderDeads,
      orderMaterials,
      orderWorks,
      orderServices,
      rowsPhotos,
    } = req.body;
    const result = await updateOrder(
      id,
      orderData,
      orderDeads,
      orderMaterials,
      orderWorks,
      orderServices,
      rowsPhotos
    );
    if (result.success) {
      return res
        .status(200)
        .json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ", order: result.order });
    }
    return res.status(400).json({ message: result.error });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
  }
});

// router.put("/update/:id", upload.array("photos"), async (req, res) => {
//   try {
//     const { id } = req.params;
//     const {
//       orderData,
//       orderDeads,
//       orderMaterials,
//       orderWorks,
//       orderServices,
//       rowsPhotos,
//     } = req.body;
//     const result = await updateOrder(
//       id,
//       orderData,
//       orderDeads,
//       orderMaterials,
//       orderWorks,
//       orderServices,
//       rowsPhotos
//     );
//     res
//       .status(200)
//       .json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", order: result.order });
//   } catch (error) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
//     res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" });
//   }
// });

router.put("/change-status-order", async (req, res) => {
  try {
    const { orderId, statuses, name } = req.body;
    if (!orderId || !Array.isArray(statuses)) {
      return res
        .status(400)
        .json({ message: "orderId –∏ statuses (–º–∞—Å—Å–∏–≤) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }
    const newStatus = await updateOrderStatus(orderId, statuses, name);

    res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω", newStatus });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞" });
  }
});

router.delete("/remove-order/:orderId", async (req, res) => {
  try {
    const { orderId } = req.params;
    const result = await deleteOrder(orderId);
    res.status(200).json(result);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" });
  }
});

module.exports = router;

const { Router } = require("express");
const TelegramBot = require("node-telegram-bot-api");
const router = Router();
const { models } = require("../models/index");
const { v4: uuidv4 } = require("uuid");
const {
  Orders,
  OrderDeads,
  OrderMaterials,
  OrderWorks,
  OrderServices,
  Warehouse,
  Materials,
} = models;

const { Op } = require("sequelize");
const botStatusToken = "8162606893:AAEBI9zyxJ65SDAJAcYzPRDyXXbyuaWYkac";
const botOrdersTokken = "7983082460:AAGjnK4UrVeN8eNDKm0bQoFu0itVRxQ1-sE";
const botWarehouseToken = "7740212030:AAGOnzCMvqJrJkyrg3YpuQC7SrG7icJfuTE";
const bot = new TelegramBot(botStatusToken, { polling: true });
const botOrders = new TelegramBot(botOrdersTokken, { polling: true });
const botWarehouse = new TelegramBot(botWarehouseToken, { polling: true });

const statusChatIds = new Set();
const orderChatIds = new Set();
const warehouseChatIds = new Set();

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  statusChatIds.add(chatId);
  bot.sendMessage(
    chatId,
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –∑–∞–∫–∞–∑–æ–≤."
  );
});

botOrders.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  orderChatIds.add(chatId);
  botOrders.sendMessage(
    chatId,
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö."
  );
});

botWarehouse.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  warehouseChatIds.add(chatId);

  const welcomeMessage =
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–µ.";
  const replyMarkup = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏", callback_data: "check_stock" }],
      ],
    },
  };

  botWarehouse.sendMessage(chatId, welcomeMessage, replyMarkup);
});

botWarehouse.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const action = query.data;

  if (action === "check_stock") {
    try {
      const lowStockItems = await Warehouse.findAll({
        where: {
          quantity: {
            [Op.lt]: 5,
          },
        },
      });

      if (lowStockItems.length === 0) {
        return botWarehouse.sendMessage(chatId, "‚úÖ –í—Å–µ –∑–∞–ø–∞—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ!");
      }

      const message = lowStockItems
        .map(
          (item) =>
            `üõ† <b>${item.name}(${item.length}X${item.width}X${item.thickness})</b>\n` +
            `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n\n`
        )
        .join("");

      botWarehouse.sendMessage(
        chatId,
        `‚ö†Ô∏è <b>–¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º:</b>\n\n${message}`,
        { parse_mode: "HTML" }
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤:", error);
      botWarehouse.sendMessage(
        chatId,
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ."
      );
    }
  }

  botWarehouse.answerCallbackQuery(query.id);
});

async function sendLowStockNotification(
  materialName,
  requiredQuantity,
  availableQuantity,
  missingQuantity
) {
  const message = `
    ‚ö†Ô∏è <b>–ù–∞ —Å–∫–ª–∞–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—å—Å—è:</b> ${materialName}\n
    üì¶ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è:</b> ${requiredQuantity}\n
    üì¶ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> ${availableQuantity}\n
    ‚ùóÔ∏è <b>–ù—É–∂–Ω–æ –¥–æ–∑–∞–∫–∞–∑–∞—Ç—å:</b> ${missingQuantity}
  `;

  for (const chatId of warehouseChatIds) {
    try {
      await botWarehouse.sendMessage(chatId, message, { parse_mode: "HTML" });
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error);
    }
  }
}

function selectStatus(key) {
  const statusOptions = {
    new: "–ù–æ–≤—ã–π",
    layout: "–ú–∞–∫–µ—Ç",
    "layout-accepted": "–ü—Ä–∏–Ω—è—Ç –ú–∞–∫–µ—Ç",
    "engraving(front)": "–ì—Ä–∞–≤–∏—Ä–æ–≤–∫–∞(–§—Ä–æ–Ω—Ç)",
    "engraving(reverse)": "–ì—Ä–∞–≤–∏—Ä–æ–≤–∫–∞(–†–µ–≤–µ—Ä—Å)",
    "engraving(plate)": "–ì—Ä–∞–≤–∏—Ä–æ–≤–∫–∞(–ü–ª–∏—Ç–∞)",
    "engraving(stand)": "–ì—Ä–∞–≤–∏—Ä–æ–≤–∫–∞(–¢—É–º–±–∞)",
    milling: "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞",
    concreting: "–ë–µ—Ç–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "laying-tiles": "–£–∫–ª–∞–¥–∫–∞ –ø–ª–∏—Ç–∫–∏",
    installation: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞",
    completed: "–ó–∞–≤–µ—Ä—à–µ–Ω",
  };

  return statusOptions[key];
}

async function sendOrderUpdateMessage(message, type) {
  const targetChatIds = type === "status" ? statusChatIds : orderChatIds;

  for (const chatId of targetChatIds) {
    try {
      if (type === "status") {
        await bot.sendMessage(chatId, message, { parse_mode: "HTML" });
      } else {
        await botOrders.sendMessage(chatId, message, { parse_mode: "HTML" });
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error);
    }
  }
}
async function deleteRelatedData(parentId, transaction) {
  await OrderDeads.destroy({ where: { parentId }, transaction });
  await OrderMaterials.destroy({ where: { parentId }, transaction });
  await OrderWorks.destroy({ where: { parentId }, transaction });
  await OrderServices.destroy({ where: { parentId }, transaction });
}
async function handleOrderDeads(orderDeads, parentId, transaction) {
  if (orderDeads && orderDeads.length > 0) {
    for (const dead of orderDeads) {
      await OrderDeads.create({ ...dead, parentId }, { transaction });
    }
  }
}

async function handleOrderMaterials(
  orderMaterials,
  parentId,
  transaction,
  isUpdate = false
) {
  if (!orderMaterials || orderMaterials.length === 0) return;

  for (const material of orderMaterials) {
    const { quantity = 1, ...rest } = material;
    const isCreatedMenedger = material.isCreatedMenedger;

    const parsedQuantity = parseFloat(quantity) || 0;

    let previousQuantity = 0;

    if (isUpdate) {
      previousQuantity = await getPreviousOrderQuantity(
        parentId,
        material.name
      );
    }

    const quantityDifference = parsedQuantity - previousQuantity;

    if (isCreatedMenedger) {
      await processCustomMaterial(material, quantityDifference, transaction);
    } else if (material.warehouseId) {
      await processWarehouseMaterial(material, quantityDifference, transaction);
    }

    await OrderMaterials.upsert(
      { ...rest, quantity: parsedQuantity, parentId },
      { transaction }
    );
  }
}

async function getPreviousOrderQuantity(parentId, materialName) {
  const existingOrderMaterial = await OrderMaterials.findOne({
    where: { parentId, name: materialName },
  });

  if (!existingOrderMaterial) {
    return 0;
  }

  const previousQuantity = parseFloat(existingOrderMaterial.quantity) || 0;

  return previousQuantity;
}

async function processCustomMaterial(
  material,
  quantityDifference,
  transaction
) {
  const existingMaterial = await Materials.findOne({
    where: { name: material.name },
    transaction,
  });

  if (!existingMaterial) {
    await Materials.create(
      {
        name: material.name,
        length: material.length || null,
        width: material.width || null,
        thickness: material.thickness || null,
        price: material.price || 0,
        isCreateMenedger: true,
        quantity: parseFloat(quantityDifference),
      },
      { transaction }
    );
  } else {
    existingMaterial.quantity =
      (parseFloat(existingMaterial.quantity) || 0) +
      parseFloat(quantityDifference);
    await existingMaterial.save({ transaction });
  }
}

// async function processWarehouseMaterial(
//   material,
//   quantityDifference,
//   transaction
// ) {
//   const warehouseItem = await Warehouse.findByPk(material.warehouseId, {
//     transaction,
//   });

//   if (!warehouseItem) {
//     throw new Error(`–°–∫–ª–∞–¥—Å–∫–æ–π —Ç–æ–≤–∞—Ä —Å ID ${material.warehouseId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
//   }

//   const availableQuantity = parseFloat(warehouseItem.quantity) || 0;

//   if (quantityDifference > 0) {
//     if (availableQuantity >= quantityDifference) {
//       warehouseItem.quantity -= quantityDifference;
//     } else {
//       const missingQuantity = quantityDifference - availableQuantity;
//       warehouseItem.quantity = 0;

//       await updateOrCreateMaterial(
//         material,
//         missingQuantity,
//         false,
//         transaction
//       );

//       console.log("UPDATE OR CREATE");
//     }
//   } else if (quantityDifference < 0) {
//     warehouseItem.quantity += Math.abs(quantityDifference);
//   }

//   await warehouseItem.save({ transaction });
//   await sendLowStockNotification(
//     material.name, // –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
//     quantityDifference, // –¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
//     availableQuantity, // –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
//     missingQuantity // –ù–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
//   );
// }

async function processWarehouseMaterial(
  material,
  quantityDifference,
  transaction
) {
  const warehouseItem = await Warehouse.findByPk(material.warehouseId, {
    transaction,
  });

  if (!warehouseItem) {
    throw new Error(`–°–∫–ª–∞–¥—Å–∫–æ–π —Ç–æ–≤–∞—Ä —Å ID ${material.warehouseId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }

  const availableQuantity = parseFloat(warehouseItem.quantity) || 0;
  let missingQuantity = 0; // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞—Ä–∞–Ω–µ–µ

  if (quantityDifference > 0) {
    if (availableQuantity >= quantityDifference) {
      // –ï—Å–ª–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞
      warehouseItem.quantity -= quantityDifference;
    } else {
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
      missingQuantity = quantityDifference - availableQuantity;
      warehouseItem.quantity = 0;

      await updateOrCreateMaterial(
        material,
        missingQuantity,
        false,
        transaction
      );

      console.log("UPDATE OR CREATE");
    }
  } else if (quantityDifference < 0) {
    // –ï—Å–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–æ–∑–≤—Ä–∞—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    warehouseItem.quantity += Math.abs(quantityDifference);
  }

  await warehouseItem.save({ transaction });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ, –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 0
  if (missingQuantity > 0) {
    await sendLowStockNotification(
      material.name, // –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
      quantityDifference, // –¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      availableQuantity, // –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      missingQuantity // –ù–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    );
  }
}

async function updateOrCreateMaterial(
  material,
  missingQuantity,
  isCreateMenedger,
  transaction
) {
  const materialData = material.warehouseId
    ? await getMaterialDataFromWarehouse(material.warehouseId, transaction)
    : {
        id: uuidv4(),
        name: material.name,
        length: material.length || null,
        width: material.width || null,
        thickness: material.thickness || null,
        weight: material.weight || 0,
        price: material.price || 0,
        priceM2: material.priceM2 || 0,
        quantity: material.quantity || 0,
        warehouseId: material.id,
      };

  const existingMaterial = await Materials.findOne({
    where: { id: materialData.id },
    transaction,
  });

  if (!existingMaterial) {
    await Materials.create(
      {
        ...materialData,
        isCreateMenedger: !!isCreateMenedger,
        quantity: parseFloat(missingQuantity),
      },
      { transaction }
    );
  } else {
    console.log(
      `[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ] –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª ${materialData.name}: –¥–æ–±–∞–≤–ª—è–µ–º ${missingQuantity}`
    );
    existingMaterial.quantity =
      (parseFloat(existingMaterial.quantity) || 0) +
      parseFloat(missingQuantity);

    await existingMaterial.save({ transaction });
  }
}

async function getMaterialDataFromWarehouse(warehouseId, transaction) {
  const warehouseItem = await Warehouse.findByPk(warehouseId, { transaction });

  if (!warehouseItem) {
    throw new Error(
      `–°–∫–ª–∞–¥—Å–∫–æ–π —Ç–æ–≤–∞—Ä —Å ID ${warehouseId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Materials`
    );
  }

  return {
    id: uuidv4(),
    name: warehouseItem.name,
    length: warehouseItem.length || null,
    width: warehouseItem.width || null,
    thickness: warehouseItem.thickness || null,
    weight: warehouseItem.weight || 0,
    price: warehouseItem.price || 0,
    priceM2: warehouseItem.priceM2 || 0,
    warehouseId: warehouseItem.id,
  };
}

async function handleOrderServices(orderServices, parentId, transaction) {
  if (orderServices && orderServices.length > 0) {
    for (const service of orderServices) {
      await OrderServices.create({ ...service, parentId }, { transaction });
    }
  }
}
async function handleOrderWorks(orderWorks, parentId, transaction) {
  if (orderWorks && orderWorks.length > 0) {
    for (const work of orderWorks) {
      await OrderWorks.create({ ...work, parentId }, { transaction });
    }
  }
}

router.get("/", async (req, res) => {
  const { status, startDate, endDate, search } = req.query;

  try {
    const where = {};

    if (status) {
      where.status = status;
    }

    if (startDate || endDate) {
      where.createdAt = {};
      if (startDate) {
        where.createdAt[Op.gte] = new Date(startDate);
      }
      if (endDate) {
        where.createdAt[Op.lte] = new Date(endDate);
      }
    }

    // –ü–æ—à—É–∫
    if (search) {
      where[Op.or] = [{ phone: { [Op.like]: `%${search}%` } }];
    }

    const orders = await Orders.findAll({
      where,
      include: [
        {
          model: models.OrderMaterials,
        },
        {
          model: models.OrderWorks,
        },
        {
          model: models.OrderServices,
        },
        {
          model: models.OrderDeads,
        },
      ],
    });

    res.status(200).json({
      message: "–£—Å–ø–µ—à–Ω–æ (–ó–∞–∫–∞–∑—ã)",
      orders,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö" });
  }
});

router.get("/:id", async (req, res) => {
  const { id: orderId } = req.params;

  try {
    const order = await Orders.findOne({
      where: { id: orderId },
      include: [
        {
          model: models.OrderMaterials,
        },
        {
          model: models.OrderWorks,
        },
        {
          model: models.OrderServices,
        },
        {
          model: models.OrderDeads,
        },
      ],
    });

    if (!order) {
      return res
        .status(404)
        .json({ message: `–ó–∞–∫–∞–∑ —Å ID ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
    }

    res.status(200).json({
      message: `–£—Å–ø–µ—à–Ω–æ (–ó–∞–∫–∞–∑, ${orderId})`,
      order,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞" });
  }
});

router.post("/create", async (req, res) => {
  const { orderData, orderDeads, orderMaterials, orderWorks, orderServices } =
    req.body;

  const transaction = await Orders.sequelize.transaction();

  try {
    const order = await Orders.create(orderData, { transaction });

    await handleOrderDeads(orderDeads, order.id, transaction);
    await handleOrderMaterials(orderMaterials, order.id, transaction, false);
    await handleOrderWorks(orderWorks, order.id, transaction);
    await handleOrderServices(orderServices, order.id, transaction);

    const message = `
    üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n
    üìù <b>–ù–∞–∑–≤–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${order.name}\n
    üë§ <b>–ó–∞–º–æ–≤–Ω–∏–∫:</b> ${order.first_name} ${order.second_name}\n
    üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${order.phone}\n
    üïí <b>–î–∞—Ç–∞ –∑–º—ñ–Ω–∏:</b> ${new Date().toLocaleString()}\n
    üîÑ <b>–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:</b> ${selectStatus(order.status)}\n
    üí≥ <b>–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞:</b> ${order.prepayment}‚Ç¥\n
    üíµ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> ${order.totalPrice}‚Ç¥\n
    üíª <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${order.source}\n

        `;

    await sendOrderUpdateMessage(message, "orders");

    await transaction.commit();

    res.status(200).json({
      message: "–£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
      order,
    });
  } catch (error) {
    await transaction.rollback();
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
  }
});

router.put("/update/:id", async (req, res) => {
  const { id } = req.params;
  const { orderData, orderDeads, orderMaterials, orderWorks, orderServices } =
    req.body;

  const transaction = await Orders.sequelize.transaction();

  try {
    const order = await Orders.findByPk(id);
    if (!order) {
      return res.status(404).json({ message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    await order.update(orderData, { transaction });
    await deleteRelatedData(id, transaction);
    await handleOrderDeads(orderDeads, id, transaction);
    await handleOrderMaterials(orderMaterials, id, transaction, true);
    await handleOrderWorks(orderWorks, id, transaction);
    await handleOrderServices(orderServices, id, transaction);

    await transaction.commit();

    res.status(200).json({
      message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ",
      order,
    });
  } catch (error) {
    await transaction.rollback();
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
  }
});

router.put("/change-status-order", async (req, res) => {
  const { orderId, newStatus } = req.body;

  if (!orderId || !newStatus) {
    return res
      .status(400)
      .json({ message: "orderId —Ç–∞ newStatus —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏" });
  }

  const transaction = await Orders.sequelize.transaction();

  try {
    await Orders.update(
      { status: newStatus },
      { where: { id: orderId }, transaction }
    );

    const order = await Orders.findByPk(orderId);

    if (!order) {
      throw new Error("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }

    const message = `
üì¶ <b>–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ</b>\n
üìù <b>–ù–∞–∑–≤–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${order.name}\n
üë§ <b>–ó–∞–º–æ–≤–Ω–∏–∫:</b> ${order.first_name} ${order.second_name}\n
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${order.phone}\n
üïí <b>–î–∞—Ç–∞ –∑–º—ñ–Ω–∏:</b> ${new Date().toLocaleString()}\n
üîÑ <b>–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:</b> ${selectStatus(newStatus)}
    `;

    await sendOrderUpdateMessage(message, "status");

    await transaction.commit();

    res.status(200).json({ message: "–£—Å–ø—ñ—à–Ω–æ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ" });
  } catch (error) {
    await transaction.rollback();
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
  }
});

// router.delete("/remove-order/:orderId", async (req, res) => {
//   const { orderId } = req.params;

//   const transaction = await Orders.sequelize.transaction();

//   try {
//     const orderMaterials = await OrderMaterials.findAll({
//       where: { parentId: orderId },
//       transaction,
//     });

//     console.log("–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", orderMaterials);

//     for (const material of orderMaterials) {
//       console.log("–û–±—Ä–æ–±–∫–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª—É:", material);

//       if (material.warehouseId) {
//         const warehouseItem = await Warehouse.findByPk(material.warehouseId, {
//           transaction,
//         });

//         if (warehouseItem) {
//           console.log("–ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ:", warehouseItem.quantity);

//           const restoredQuantity = parseFloat(material.quantity) || 1;
//           warehouseItem.quantity =
//             (parseFloat(warehouseItem.quantity) || 0) + restoredQuantity;

//           console.log(
//             `–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: +${restoredQuantity}, –ù–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${warehouseItem.quantity}`
//           );

//           await warehouseItem.save({ transaction });
//         } else {
//           console.warn(
//             `–°–∫–ª–∞–¥—Å—å–∫–∏–π —Ä–µ—Å—É—Ä—Å —ñ–∑ ID ${material.warehouseId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`
//           );
//         }
//       }
//     }

//     await OrderMaterials.destroy({
//       where: { parentId: orderId },
//       transaction,
//     });

//     await Orders.destroy({ where: { id: orderId }, transaction });

//     await transaction.commit();

//     res.status(200).json({
//       message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ, —Ä–µ—Å—É—Ä—Å–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥",
//     });
//   } catch (error) {
//     await transaction.rollback();
//     console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
//     res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
//   }
// });

//testing start

//testing end

// router.delete("/remove-order/:orderId", async (req, res) => {
//   const { orderId } = req.params;

//   const transaction = await Orders.sequelize.transaction();

//   try {
//     let totalCount = 0;
//     let returnedWarehouse = 0;
//     let materialQuantity = 0;

//     const newOrders = await Orders.findAll({
//       where: { status: "new" },
//       include: [{ model: OrderMaterials }],
//       transaction,
//     });

//     for (const order of newOrders) {
//       for (const material of order.OrderMaterials) {
//         totalCount += parseFloat(material.quantity) || 0;

//         const materialEntry = await Materials.findOne({
//           where: { warehouseId: material.warehouseId },
//           transaction,
//         });

//         if (materialEntry) {
//           materialQuantity = parseFloat(materialEntry.quantity) || 0;
//         }
//       }

//       returnedWarehouse = totalCount - materialQuantity;
//     }

//     console.log("KKKDKD", returnedWarehouse);

//     res.status(200).json({
//       message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ, —Ä–µ—Å—É—Ä—Å–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥",
//     });
//   } catch (error) {
//     await transaction.rollback();
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
//     res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞" });
//   }
// });

module.exports = router;
